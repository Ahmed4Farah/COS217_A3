Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

3h (ago)
Mar 5: 5:30pm - 7:09pm (1.5)
Mar 5: 8:17pm - 11:30pm (3.15)
Mar 6: 2:20am - 5:54am (3.5)
Mar 6: 4:46pm - 5:15pm
Mat 7: 2:38am -

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

COS 217 lecture materials.
COS 217 precept materials.
COS 217 website.
The man pages on the armlab cluster.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

N/A

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

It was a bit hard to get started, but totally reasonable once I got
a skeleton for my code. I enjoyed it!

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

There are no bugs in my code - as far as I'm aware.

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablelist.c:223:5: Statement has no effect: pfApply(psCurren...
Statement has no visible effect --- no values are modified.
(Use -noeffect to inhibit warning)
==> It is true that this line has no effect on the internal structure
of the symbol table. SymTable_map() simply applies the given function
to all the key-value pairs. Its effect is only clear to the client.

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 78: medium priority:
Do you want to validate 'pvValue' through an assert?
==> We want to allow any value for pvValue, including NULL pointers.

symtablelist.c: line 133: medium priority:
Do you want to validate 'pvValue' through an assert?
==> We want to allow any value for pvValue, including NULL pointers.

symtablelist.c: line 215: medium priority:
Do you want to validate 'pvExtra' through an assert?
==> We want to allow any value for pvExtra, including NULL pointers.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablehash.c:308:7: Statement has no effect: pfApply(psCurren...
Statement has no visible effect --- no values are modified.
(Use -noeffect to inhibit warning)
==> Same thing as for symtablelist.c
It is true that this line has no effect on the internal structure
of the symbol table. SymTable_map() simply applies the given function
to all the key-value pairs. Its effect is only clear to the client.


------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."


symtablelist.c: line 78: medium priority:
Do you want to validate 'pvValue' through an assert?
==> We want to allow any value for pvValue, including NULL pointers.

symtablelist.c: line 133: medium priority:
Do you want to validate 'pvValue' through an assert?
==> We want to allow any value for pvValue, including NULL pointers.

symtablelist.c: line 215: medium priority:
Do you want to validate 'pvExtra' through an assert?
==> We want to allow any value for pvExtra, including NULL pointers.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000083 seconds.
-- 500 bindings consumed 0.002523 seconds.
-- 5000 bindings consumed 0.153610 seconds.
-- 50000 bindings consumed 16.876221 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000080 seconds.
-- 500 bindings consumed 0.000660 seconds.
-- 5000 bindings consumed 0.005558 seconds.
-- 50000 bindings consumed 0.121269 seconds.
-- 500000 bindings consumed 22.759364 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000060 seconds.
-- 500 bindings consumed 0.000655 seconds.
-- 5000 bindings consumed 0.009505 seconds.
-- 50000 bindings consumed 0.079568 seconds.
-- 500000 bindings consumed 0.623719 seconds.
